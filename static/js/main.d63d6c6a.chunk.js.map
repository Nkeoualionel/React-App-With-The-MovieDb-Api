{"version":3,"sources":["logo.svg","components/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieRow","url","this","props","movie","id","window","location","href","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","Component","App","state","performerSearch","search","urlString","$","ajax","success","searchResult","console","log","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","searchTerm","className","style","fontSize","display","paddingTop","paddingLeft","paddingBottom","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,8HCiC5BC,G,gLAxBH,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,I,+BAK3B,OAAO,2BAAOQ,IAAKP,KAAKC,MAAMC,MAAMC,IACxB,+BACI,4BACA,4BACI,yBAAKK,IAAI,SAASC,MAAM,MAAMC,IAAKV,KAAKC,MAAMC,MAAMS,cAGxD,4BACI,4BAAKX,KAAKC,MAAMC,MAAMU,OACtB,2BAAIZ,KAAKC,MAAMC,MAAMW,UACrB,2BAAOC,KAAK,SAASC,QAASf,KAAKgB,UAAUC,KAAKjB,MAAOkB,MAAM,iB,GAvBpEC,c,gBCqFRC,G,wDA/Eb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAEDoB,MAAQ,GACb,EAAKC,gBAAgB,YAJJ,E,4DAQHC,GAAQ,IAAD,OACbC,EAAY,mDAAmDD,EAAO,4CAC5EE,IAAEC,KAAK,CACL3B,IAAKyB,EACLG,QAAS,SAACC,GACRC,QAAQC,IAAI,yBACZ,IAAMC,EAAUH,EAAaG,QAEzBC,EAAY,GAEhBD,EAAQE,SAAQ,SAAC/B,GACfA,EAAMS,WAAa,kCAAoCT,EAAMgC,YAE3D,IAAMC,EAAW,kBAAC,EAAD,CAAU5B,IAAKL,EAAMC,GAAID,MAAOA,IACjD8B,EAAUI,KAAKD,MAGnB,EAAKE,SAAS,CAACC,KAAMN,KAGvBO,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQC,IAAK,6B,0CAKDa,GAChBd,QAAQC,IAAIa,EAAMC,OAAO1B,OACzB,IACM2B,EAAaF,EAAMC,OAAO1B,MADZlB,KAERsB,gBAAgBuB,K,+BAK9B,OACE,yBAAKC,UAAU,OACX,2BAAOA,UAAU,YACf,+BACE,4BACG,4BACG,yBAAKtC,IAAI,WAAWC,MAAM,OAAOC,IAAI,aAEvC,wBAAID,MAAM,MACX,4BACG,wDAMV,2BAAOsC,MAAO,CACZC,SAAU,GACVC,QAAS,QACTxC,MAAO,MACPyC,WAAY,EACZC,YAAY,EACZC,cAAc,IAEhBC,SAAUrD,KAAKsD,oBAAoBrC,KAAKjB,MACxCuD,YAAY,2BAEd,4BAAKvD,KAAKqB,MAAMiB,W,GAxENnB,cCMEqC,QACW,cAA7BpD,OAAOC,SAASoD,UAEe,UAA7BrD,OAAOC,SAASoD,UAEhBrD,OAAOC,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLV,QAAQU,MAAMA,EAAMgC,c","file":"static/js/main.d63d6c6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nclass MovieRow extends Component {\r\n\r\n\r\n\r\n    viewMovie(){\r\n            // console.log(\"Try to view a movie\")\r\n            // console.log(this.props.movie.title)\r\n            const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n            window.location.href = url\r\n    }\r\n\r\n\r\n    render() {\r\n        return <table key={this.props.movie.id}>\r\n                    <tbody>\r\n                        <tr>\r\n                        <td>\r\n                            <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n                        </td>\r\n\r\n                        <td>\r\n                            <h3>{this.props.movie.title}</h3>\r\n                            <p>{this.props.movie.overview}</p>\r\n                            <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"view\"/>\r\n                        </td>\r\n                        </tr>\r\n                    </tbody>\r\n               </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport MovieRow from './components/MovieRow.js'\nimport $ from 'jquery';\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n    this.performerSearch(\"avengers\")\n  \n  }\n\n  performerSearch(search){\n      const urlString = \"https://api.themoviedb.org/3/search/movie?query=\"+search+\"&api_key=6b82c27641d9b5858ef60d948329d46d\";\n      $.ajax({\n        url: urlString,\n        success: (searchResult) => {\n          console.log(\"success fetching data\")\n          const results = searchResult.results\n\n          var movieRows = []\n\n          results.forEach((movie) => {\n            movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n             // console.log(movie.poster_path)\n              const movieRow = <MovieRow key={movie.id} movie={movie}/>\n              movieRows.push(movieRow)\n          })\n\n          this.setState({rows: movieRows})\n        },\n\n        error: (xhr, status, err) => {\n          console.log (\"Failed to fetch data\")\n        }\n      })\n  }\n\n  searchChangeHandler(event){\n      console.log(event.target.value)\n      const boundObject = this\n      const searchTerm = event.target.value\n      boundObject.performerSearch(searchTerm)\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n          <table className=\"titleBar\">\n            <tbody>\n              <tr>\n                 <td>\n                    <img alt=\"app icon\" width=\"50px\" src=\"mdb.svg\"/>\n                 </td>\n                  <td width=\"8\"/>\n                 <td>\n                    <h3>The Movies DB Search</h3>\n                 </td>\n              </tr>\n            </tbody>\n          </table>\n  \n          <input style={{\n            fontSize: 24,\n            display: 'block',\n            width: '99%',\n            paddingTop: 8,\n            paddingLeft:8,\n            paddingBottom:16\n          }} \n          onChange={this.searchChangeHandler.bind(this)}\n          placeholder=\"Search your movie here\"/>\n\n        <h3>{this.state.rows}</h3>\n      </div>\n    );\n  }\n  \n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}